  #add library
%matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
  #add file with data
meld_data_file = '..\melb_data.csv'
  #add method reading .csv
melbourne_data = pd.read_csv(meld_data_file) 
  #print several string for control
melbourne_data.head(4)
  #look describe of this data
melbourne_data.describe()
melbourne_data.info()
  #discover the data
  #use method scatter for visualising depends
pd.scatter_matrix(melbourne_data[['Bathroom', 'Rooms', 'Price']], 
                  figsize=(15, 15), diagonal='kde')
plt.show()
  #use method boxplot
melbourne_data.boxplot(column='Price', by='Rooms')
plt.show()
  #look describe of the features and define features for model
features = ['Rooms','Distance','Bathroom','Bedroom2','Landsize', 'Lattitude', 'Longtitude']
X = melbourne_data[features]
X.describe()
  #print several string for control
X.head(5)
  #look one of the features
y = melbourne_data.Price
y.head(5)
  #import model from library
from sklearn.tree import DecisionTreeRegressor
  # Define model.
melbourne_model = DecisionTreeRegressor(random_state=1)
  # Fit model
melbourne_model.fit(X, y)

  #output
  DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_impurity_decrease=0.0,
           min_impurity_split=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           presort=False, random_state=1, splitter='best')
    
  #check predict of our model
print("Предсказываем стоимость для домов:")
print(X.head(7))
print("Предсказанная цена:")
print(melbourne_model.predict(X.head(7)))
  #check the data
melbourne_data.head(7)

  #check the error
  #import method
from sklearn.metrics import mean_absolute_error
  #define argument of method
predicted_home_prices = melbourne_model.predict(X)
  #calculate the error of MAE
mean_absolute_error(y, predicted_home_prices)

  #TRAIN and VALIDATION set
  #import library
import numpy as np
  #import method
from sklearn.model_selection import train_test_split

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)
# Define model
melbourne_model = DecisionTreeRegressor()
# Fit model
melbourne_model.fit(train_X, train_y)

# get predicted prices on validation data
val_predictions = melbourne_model.predict(val_X)
  #Print error
print(mean_absolute_error(val_y, val_predictions))
  #averrage price of house
y.mean()
